{"version":3,"sources":["chess/chess.module.css","utils/palette.js","chess/helpers.ts","chess/useHandlers.ts","helpers/customHooks.ts","chess/useInitializeBoard.ts","chess/useBoardHistory.ts","chess/chess.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","main","board","square","squareWithoutBorder","figures","palette","brown","white","red","green","getInitialSquareColor","i","j","moves","whitePawn","steps","attackWhite","attack","initial","whiteRook","Array","fill","map","item","whiteHorse","whiteBishop","whiteKing","rotateJ","whiteQueen","blackPawn","attackBlack","blackRook","blackHorse","blackBishop","blackKing","rotateI","blackQueen","directions","Pawn","Rook","blockers","Horse","Bishop","King","Queen","useHandlers","setBoard","boardHistory","setBoardHistory","_useState","useState","_useState2","Object","slicedToArray","isCheck","setIsCheck","_useState3","data","_useState4","activeCell","setActiveCell","_useState5","_useState6","currentPlayer","setCurrentPlayer","_useState7","_useState8","checkmate","setCheckmate","_useState9","undefined","_useState10","chooseFigure","setChooseFigure","prevActiveCell","value","ref","useRef","useEffect","current","usePrevious","getRivalColor","playerColor","locateKing","color","result","forEach","row","cell","figureName","figureColor","getIsCheck","kingPos","checkObj","kingCoords","entries","_ref","_ref2","key","figureAttacingCoords","found","k","length","checkDirection","h","x","y","push","indexToCompare","includes","handleMove","boardCopy","_","cloneDeep","isFirstMove","objectSpread","handleCastle","delta","handleTakeInitialPawn","getFigureMoves","highlightCell","checkForRivalFigure","checkForPlayerFigure","checkForFigure","coords","_activeCell$data","figureSteps","concat","isBreaked","lookingPawnCoords","deltaIForPrevBoard","deltaIForPrevCoord","prevFigure","coordsUnderCheck","kingAvailableCoords","o","arr","index","findIndex","e","ind","isEqual","splice","castleCoords","getCastleMoves","apply","blockingCoords","toConsumableArray","find","check","boardItem","deltaI","deltaJ","availableCoords","kingColor","kingI","kingJ","reqs","_steps$h$k","isFigure","req","rook","every","newBoard","boardH","player","kingMoves","_ret","v","isCheckMate","_locateKing","handleBoxClick","nextPlayer","handleChooseFigure","console","log","useInitializeBoard","getInitialPositions","useCallback","chessBoard","getInitialFigureByPosition","figureImg","initBoard","useBoardHistory","Chess","_useInitializeBoard","_useInitializeBoard2","_useBoardHistory","_useBoardHistory2","_useHandlers","style","top","bottom","react_default","a","createElement","className","styles","Paper","classes","root","isArray","Button","onClick","backgroundColor","backgroundImage","sx","zIndex","preventDefault","stopPropagation","App","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.002133ae.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"chess_main__3oZk0\",\"board\":\"chess_board__2cCVC\",\"square\":\"chess_square__3QoMx\",\"squareWithoutBorder\":\"chess_squareWithoutBorder__2GTjJ\",\"figures\":\"chess_figures__2hib4\"};","import { green, red } from '@mui/material/colors'\r\n\r\nexport default {\r\n    brown: '#72371C',\r\n    white: '#FFE9C5',\r\n    red: red[400],\r\n    green: green[200]\r\n}\r\n","import { squareColor } from '../utils/interfaces';\r\nimport palette from '../utils/palette';\r\n\r\nexport const getInitialSquareColor = (i: number, j: number): squareColor => {\r\n    if(i % 2===0){\r\n        if(j % 2 === 0) return palette.brown\r\n        return palette.white;\r\n    } else {\r\n        if(j % 2 === 0) return palette.white\r\n        return palette.brown;\r\n    }\r\n}\r\n\r\ninterface StepsShape { \r\n    steps: {i: number, j: number, rotateI?: number, rotateJ?: number}[][], \r\n    attack?: {i: number, j: number}[], \r\n    attackWhite?: {i: number, j: number}[][], \r\n    attackBlack?: {i: number, j: number}[][], \r\n    initial?: {i: number, j: number}[], \r\n    blockers?: ('Pawn' | 'Rook' | 'Horse' | 'Bishop' | 'King')[] \r\n}\r\n\r\ninterface Moves {\r\n    whitePawn: StepsShape,\r\n    whiteRook: StepsShape,\r\n    whiteHorse: StepsShape,\r\n    whiteBishop: StepsShape,\r\n    whiteKing: StepsShape,\r\n    whiteQueen: StepsShape,\r\n\r\n    blackPawn: StepsShape,\r\n    blackRook: StepsShape,\r\n    blackHorse: StepsShape,\r\n    blackBishop: StepsShape,\r\n    blackKing: StepsShape,\r\n    blackQueen: StepsShape,\r\n}\r\n\r\nexport let moves: Moves = {\r\n    whitePawn: {steps: [[{i: -1, j: 0}]], attackWhite: [[{i: -1, j: -1}], [{i: -1, j: 1}]], attack: [{i: -1, j: -1}, {i: -1, j: 1}], initial: [{i: -2, j: 0}] },\r\n    whiteRook: { \r\n        steps: [\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i - i, j: item.j})), \r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i + i, j: item.j})),\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i, j: item.j - i})),\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i, j: item.j + i})),\r\n        ] \r\n    },\r\n    whiteHorse: { \r\n        steps:[ \r\n            [ {i: -1, j: -2} ],\r\n            [ {i: 1, j: -2} ],\r\n            [ {i: -1, j: 2} ],\r\n            [ {i: 1, j: 2} ],\r\n            [ {i: -2, j: -1} ],\r\n            [ {i: -2, j: 1} ],\r\n            [ {i: 2, j: -1} ],\r\n            [ {i: 2, j: 1} ]\r\n        ]\r\n     },\r\n    whiteBishop: { \r\n        steps: [\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i - i, j: item.j - i})), \r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i + i, j: item.j + i})),\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i + i, j: item.j - i})),\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i - i, j: item.j + i})),\r\n        ] ,\r\n    },\r\n    whiteKing: { \r\n        steps: [ \r\n            [{i: -1, j: -1}],\r\n            [{i: -1, j: 0}],\r\n            [{i: -1, j: 1}],\r\n            [{i: 0, j: -1, rotateJ: -2}],\r\n            [{i: 0, j: 0}],\r\n            [{i: 0, j: 1, rotateJ: 2}],\r\n            [{i: 1, j: -1}],\r\n            [{i: 1, j: 0}],\r\n            [{i: 1, j: 1}],\r\n        ] \r\n    },\r\n    whiteQueen: { \r\n        steps: [\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i - i, j: item.j - i})), \r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i + i, j: item.j + i})),\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i + i, j: item.j - i})),\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i - i, j: item.j + i})),\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i - i, j: item.j})), \r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i + i, j: item.j})),\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i, j: item.j - i})),\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i, j: item.j + i})),\r\n        ] ,\r\n     },\r\n\r\n    blackPawn: {steps: [[{i: 1, j: 0}]], attackBlack: [[{i: 1, j: -1}], [{i: 1, j: 1}]], attack: [{i: 1, j: -1}, {i: 1, j: 1}], initial: [{i: 2, j: 0}] },\r\n    blackRook: { \r\n        steps: [\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i - i, j: item.j})), \r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i + i, j: item.j})),\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i, j: item.j - i})),\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i, j: item.j + i})),\r\n        ] \r\n    },\r\n    blackHorse: { \r\n        steps:[ \r\n            [ {i: -1, j: -2} ],\r\n            [ {i: 1, j: -2} ],\r\n            [ {i: -1, j: 2} ],\r\n            [ {i: 1, j: 2} ],\r\n            [ {i: -2, j: -1} ],\r\n            [ {i: -2, j: 1} ],\r\n            [ {i: 2, j: -1} ],\r\n            [ {i: 2, j: 1} ],\r\n        ],\r\n        initial: [{i: 0, j: 3}, {i: 0, j: -2}] \r\n    },\r\n    blackBishop: { \r\n        steps: [\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i - i, j: item.j - i})), \r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i + i, j: item.j + i})),\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i + i, j: item.j - i})),\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i - i, j: item.j + i})),\r\n        ] ,\r\n    },\r\n    blackKing: { \r\n        steps:[ \r\n            [{i: -1, j: -1}],\r\n            [{i: -1, j: 0}],\r\n            [{i: -1, j: 1}],\r\n            [{i: 0, j: -1, rotateJ: -2}],\r\n            [{i: 0, j: 0}],\r\n            [{i: 0, j: 1, rotateJ: 2}],\r\n            [{i: 1, j: -1}],\r\n            [{i: 1, j: 0}],\r\n            [{i: 1, j: 1}],\r\n            [{i: 0, j: 0, rotateI: 0, rotateJ: 3}, {i: 0, j: 0, rotateI: 0, rotateJ: -2}]\r\n        ] \r\n    },\r\n    blackQueen: { \r\n        steps: [\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i - i, j: item.j - i})), \r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i + i, j: item.j + i})),\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i + i, j: item.j - i})),\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i - i, j: item.j + i})),\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i - i, j: item.j})), \r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i + i, j: item.j})),\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i, j: item.j - i})),\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i, j: item.j + i})),\r\n        ] ,\r\n     },\r\n}\r\n\r\ninterface Directions {\r\n    Pawn: StepsShape,\r\n    Rook: StepsShape,\r\n    Horse: StepsShape,\r\n    Bishop: StepsShape,\r\n    King: StepsShape,\r\n    Queen: StepsShape,\r\n}\r\n\r\n\r\nexport let directions: Directions = {\r\n    Pawn: {steps: [[{i: -1, j: 0}]], attackWhite: [[{i: -1, j: -1}], [{i: -1, j: 1}]], attackBlack: [[{i: 1, j: -1}], [{i: 1, j: 1}]], initial: [{i: -2, j: 0}] },\r\n    Rook: { \r\n        steps: [\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i - i, j: item.j})), \r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i + i, j: item.j})),\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i, j: item.j - i})),\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i, j: item.j + i})),\r\n        ],\r\n        blockers: ['Horse', 'Bishop', 'Pawn', 'King']\r\n    },\r\n    Horse: { \r\n        steps:[ \r\n            [ {i: -1, j: -2} ],\r\n            [ {i: 1, j: -2} ],\r\n            [ {i: -1, j: 2} ],\r\n            [ {i: 1, j: 2} ],\r\n            [ {i: -2, j: -1} ],\r\n            [ {i: -2, j: 1} ],\r\n            [ {i: 2, j: -1} ],\r\n            [ {i: 2, j: 1} ]\r\n        ]\r\n     },\r\n    Bishop: { \r\n        steps: [\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i - i, j: item.j - i})), \r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i + i, j: item.j + i})),\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i + i, j: item.j - i})),\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i - i, j: item.j + i})),\r\n        ] ,\r\n        blockers: ['Horse', 'Rook', 'Pawn', 'King']\r\n    },\r\n    King: { \r\n        steps: [ \r\n            [{i: -1, j: -1}],\r\n            [{i: -1, j: 0}],\r\n            [{i: -1, j: 1}],\r\n            [{i: 0, j: -1}],\r\n            [{i: 0, j: 0}],\r\n            [{i: 0, j: 1}],\r\n            [{i: 1, j: -1}],\r\n            [{i: 1, j: 0}],\r\n            [{i: 1, j: 1}],\r\n        ] \r\n    },\r\n    Queen: { \r\n        steps: [\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i - i, j: item.j - i})), \r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i + i, j: item.j + i})),\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i + i, j: item.j - i})),\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i - i, j: item.j + i})),\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i - i, j: item.j})), \r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i + i, j: item.j})),\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i, j: item.j - i})),\r\n            new Array(8).fill({i: 0, j: 0}).map((item, i) => ({i: item.i, j: item.j + i})),\r\n        ] ,\r\n        blockers: ['Horse', 'Pawn', 'King']\r\n     },\r\n}","import{ useState, useEffect} from 'react'\r\nimport { usePrevious } from '../helpers/customHooks'\r\nimport { ActiveCell, Board, BoardSquare } from \"../utils/interfaces\"\r\nimport palette from \"../utils/palette\"\r\nimport { directions, getInitialSquareColor, moves } from './helpers'\r\nimport _ from 'lodash'\r\n\r\n\r\nexport const useHandlers = (board: Board, setBoard: (board: Board) => void, boardHistory: Board[], setBoardHistory: (board: Board[]) => void) => {\r\n\r\n    const [isCheck, setIsCheck] = useState<{color: 'white' | 'black', kingCoords: {i:number, j: number}, isCheck: boolean, checkDirection: {i:number, j: number}[]}>()\r\n    const [activeCell, setActiveCell] = useState<ActiveCell>({data: null, i: null , j: null})\r\n    const [currentPlayer, setCurrentPlayer] = useState<'white' | 'black'>('white')\r\n    const [checkmate, setCheckmate] = useState<'white' | 'black'>()\r\n    const [chooseFigure, setChooseFigure] = useState<{i: number, j: number, color: 'white' | 'black'} | undefined>(undefined)\r\n\r\n    const prevActiveCell = usePrevious<ActiveCell>(activeCell)\r\n\r\n    const getRivalColor = (playerColor: 'white' | 'black'): 'white' | 'black' | undefined => {\r\n        if(!playerColor) return undefined\r\n        return playerColor === 'white' ? 'black' : 'white'\r\n    }\r\n\r\n    const handleChooseFigure = (square: BoardSquare, i: number, j: number, board: Board) => {\r\n        console.log(square, i, j, board)\r\n        let boardCopy = _.cloneDeep(board)\r\n        boardCopy[i][j] = {...boardCopy[i][j], ...square};\r\n        setBoard(boardCopy)\r\n        setChooseFigure(undefined)\r\n        setBoardHistory([...boardHistory, boardCopy])\r\n        setActiveCell({data:null, i:null, j:null})\r\n        if(currentPlayer){\r\n            setCurrentPlayer(currentPlayer)\r\n            let checkObj = getIsCheck(boardCopy, currentPlayer)\r\n            setIsCheck(checkObj)\r\n        }\r\n    }\r\n\r\n\r\n    const handleBoxClick = (data: BoardSquare | null, i: number | null , j: number | null, board: Board) => {\r\n        if(data && data.color === palette.green && (i !== activeCell.i || j !== activeCell.j)){\r\n            if(typeof(i) === 'number' && typeof(j) === 'number'){\r\n                const newBoard = handleMove(board, activeCell, i, j)\r\n                if(prevActiveCell && prevActiveCell.data && prevActiveCell.data.figureName === 'Pawn' && (i === 0 || i === 7)){\r\n                    setChooseFigure({i, j, color: currentPlayer})\r\n                }\r\n                if(newBoard && newBoard.length){\r\n                    const nextPlayer = getRivalColor(currentPlayer)\r\n                    setBoard(newBoard)\r\n                    setBoardHistory([...boardHistory, newBoard])\r\n\r\n                    setActiveCell({data:null, i:null, j:null})\r\n                    if(nextPlayer){\r\n                        setCurrentPlayer(nextPlayer)\r\n                        let checkObj = getIsCheck(newBoard, nextPlayer)\r\n                        setIsCheck(checkObj)\r\n                    }\r\n                }\r\n            }\r\n        }else{\r\n            if(data && data.figureColor === currentPlayer)\r\n            setActiveCell({data, i, j})\r\n        }\r\n    }\r\n\r\n    const isCheckMate = (board: Board, checkDirection: {i:number, j:number}[], player: 'white' | 'black') => {\r\n        let kingPos = locateKing(board, player)\r\n        let kingMoves = getFigureMoves({data: board[kingPos.i][kingPos.j], i: kingPos.i, j: kingPos.j}, board)\r\n        for (let i = 0; i < board.length; i++) {\r\n            for (let j = 0; j < board[i].length; j++) {\r\n                if(board[i][j].figureName){\r\n                    let coords = getFigureMoves({data: board[i][j], i, j}, board)\r\n                    if(coords.length){\r\n                        const availableCoords: {i:number, j: number}[] = [];\r\n    \r\n                        [...checkDirection, ...coords, ...kingMoves].forEach((o, i, arr) =>  {\r\n                            let eq = arr.find((e, ind) => {\r\n                                if (i > ind) {\r\n                                return _.isEqual(e, o);\r\n                                }\r\n                            })\r\n                            if (eq) {\r\n                                availableCoords.push(o)\r\n                            } \r\n                        })\r\n                        if(availableCoords.length){\r\n                            return\r\n                        }\r\n                    }\r\n                }\r\n                \r\n            }\r\n        }\r\n        setCheckmate(getRivalColor(player))\r\n    }\r\n\r\n    const locateKing = (board: Board, color: 'white' | 'black' | undefined): {i:number, j:number} => {\r\n        const result = {i: -1, j: -1}\r\n        board.forEach((row, i)=>{\r\n            row.forEach((cell, j)=>{\r\n                if(cell.figureName === 'King' && cell.figureColor === color){\r\n                    result.i = i\r\n                    result.j = j\r\n                }\r\n            })\r\n        })\r\n        return result\r\n    }\r\n\r\n    const getIsCheck = (board: Board, currentPlayer: 'white' | 'black', kingPos?: {i: number, j: number}) => {\r\n        const kingCoords = kingPos || locateKing(board, currentPlayer)\r\n        let {i, j} = kingCoords;\r\n        let checkObj;\r\n        Object.entries(directions).forEach(([key, value])=>{\r\n            const {steps, blockers, attackWhite, attackBlack} = value\r\n\r\n            const figureAttacingCoords = (attackWhite || attackBlack) ? currentPlayer === 'white' ? attackBlack : attackWhite : steps\r\n            let found = false\r\n            for(let k=0; k<figureAttacingCoords.length; k++){\r\n                let checkDirection = []\r\n                for(let h=0; h<figureAttacingCoords[k].length; h++){\r\n                    if(!figureAttacingCoords[k][h].i && !figureAttacingCoords[k][h].j) continue;\r\n                    let x = i + figureAttacingCoords[k][h].i\r\n                    let y = j + figureAttacingCoords[k][h].j\r\n                    if(key === 'Pawn'){\r\n                        x = i - figureAttacingCoords[k][h].i\r\n                        y = j + figureAttacingCoords[k][h].j\r\n                    }\r\n                    if(!board[x] || !board[x][y]) continue;\r\n                    checkDirection.push({i: x, j: y})\r\n                    if(key === 'Queen'){\r\n                        const indexToCompare = figureAttacingCoords[k][h - 1] ? h - 1 : h + 1\r\n                        if(figureAttacingCoords[k][h].i === figureAttacingCoords[k][indexToCompare].i || figureAttacingCoords[k][h].j === figureAttacingCoords[k][indexToCompare].j){\r\n                            blockers.push('Bishop')\r\n                        }else if(figureAttacingCoords[k][h].i !== figureAttacingCoords[k][indexToCompare].i || figureAttacingCoords[k][h].j !== figureAttacingCoords[k][indexToCompare].j){\r\n                            blockers.push('Rook')\r\n                        }\r\n                    }\r\n                    if(board[x] && board[x][y] && (board[x][y].figureColor === currentPlayer || (blockers && blockers.includes(board[x][y].figureName || '') && board[x][y].figureColor === getRivalColor(currentPlayer)))){\r\n                        checkDirection = []\r\n                        break;\r\n                    }\r\n                    if(board[x] && board[x][y] && board[x][y].figureName === key){\r\n                        checkObj = {color: currentPlayer, kingCoords, isCheck: true, checkDirection}\r\n                        found = true\r\n                        break\r\n                    }\r\n                }  \r\n                if(found) break;\r\n            }\r\n        })\r\n            return checkObj\r\n    }\r\n\r\n    const handleCastle = (boardCopy: Board, activeCell: ActiveCell, i: number, j: number) => {\r\n        if(typeof(activeCell.i) === 'number' && typeof(activeCell.j) === 'number'){\r\n            if(j > activeCell.j){\r\n                boardCopy[i][j-1] = { ...boardCopy[i][j-1], ...boardCopy[activeCell.i][activeCell.j + 4] , color: getInitialSquareColor(i, j-1), isFirstMove: false}\r\n                boardCopy[activeCell.i][activeCell.j + 4]  = {color: getInitialSquareColor(activeCell.i, activeCell.j + 4)}\r\n            }else{\r\n                boardCopy[i][j+1] = { ...boardCopy[i][j+1], ...boardCopy[activeCell.i][activeCell.j - 3], color: getInitialSquareColor(i, j+1), isFirstMove: false}\r\n                boardCopy[activeCell.i][activeCell.j - 3]  = {color: getInitialSquareColor(activeCell.i, activeCell.j - 3)}\r\n            }\r\n            boardCopy[i][j] = { ...boardCopy[i][j], ...activeCell.data, color: getInitialSquareColor(i, j), isFirstMove: false}\r\n            boardCopy[activeCell.i][activeCell.j] = {color: getInitialSquareColor(activeCell.i, activeCell.j)}\r\n        }\r\n        return boardCopy\r\n    }\r\n\r\n    const handleTakeInitialPawn = (boardCopy: Board, activeCell: ActiveCell, i: number, j: number) => {\r\n        if(!activeCell.data) return boardCopy\r\n        let delta = activeCell.data.figureColor === 'white' ? 1 : -1\r\n        boardCopy[i + delta][j] = {color: getInitialSquareColor(i + delta, j)}\r\n        return boardCopy\r\n    }\r\n\r\n    const handleMove = (board: Board, activeCell: ActiveCell, i: number, j: number) => {\r\n        let boardCopy = _.cloneDeep(board)\r\n        if(typeof(activeCell.i) === 'number' && typeof(activeCell.j) === 'number'){\r\n            if(activeCell.data && activeCell.data.figureName === 'King' && activeCell.data.isFirstMove && (j === activeCell.j + 2 || j === activeCell.j - 2)){\r\n                boardCopy = handleCastle(boardCopy, activeCell, i, j)\r\n            }\r\n\r\n            if(\r\n                activeCell.data &&\r\n                activeCell.data.figureName === 'Pawn' && \r\n                (j === activeCell.j + 1 || j === activeCell.j - 1) &&\r\n                (board[activeCell.i][activeCell.j-1] &&\r\n                board[activeCell.i][activeCell.j-1].figureName === 'Pawn' )|| (board[activeCell.i][activeCell.j+1] && board[activeCell.i][activeCell.j+1].figureName === 'Pawn')\r\n            ){\r\n                boardCopy = handleTakeInitialPawn(boardCopy, activeCell, i, j)\r\n            }\r\n\r\n            boardCopy[i][j] = { ...boardCopy[i][j], ...activeCell.data, color: getInitialSquareColor(i, j), isFirstMove: false}\r\n            boardCopy[activeCell.i][activeCell.j] = {color: getInitialSquareColor(activeCell.i, activeCell.j)}\r\n\r\n            let steps = getFigureMoves(activeCell, board)\r\n            steps.forEach((item: any)=>{\r\n                boardCopy = highlightCell(item.i, item.j, getInitialSquareColor(item.i, item.j), boardCopy)\r\n            })\r\n\r\n            return boardCopy;\r\n        }\r\n    }\r\n\r\n\r\n    const checkForRivalFigure = (color: string, i: number, j: number, board: Board): boolean => {\r\n        return board[i][j].figureColor !== color\r\n    }\r\n\r\n    const checkForPlayerFigure = (color: string, i: number, j: number, board: Board): boolean => {\r\n        return  board[i][j].figureColor === color\r\n    }\r\n\r\n    const checkForFigure = (i: number, j: number, board: Board): boolean => {\r\n        return  !!board[i][j].figureColor\r\n    }\r\n\r\n    const getFigureMoves = (activeCell: ActiveCell, board: Board): {i:number, j:number}[] => {\r\n        let coords: {i:number, j:number}[] = []\r\n        if(!activeCell || !activeCell.data) return []\r\n        const { figureColor, figureName } = activeCell.data \r\n        if(!figureColor || !figureName) return []\r\n                const figureSteps = moves[`${figureColor}${figureName}`]\r\n                const steps = figureSteps.steps\r\n                let isBreaked = false;\r\n               \r\n                if(typeof(activeCell.i)==='number' && typeof(activeCell.j)==='number' ){\r\n                    for(let h = 0; h<steps.length; h++){\r\n                        for(let k=0; k<steps[h].length; k++){\r\n                            if(!steps[h][k].i && !steps[h][k].j) continue\r\n                            const i = activeCell.i + steps[h][k].i\r\n                            const j = activeCell.j + steps[h][k].j\r\n                            if((!board[i] || !board[i][j])) continue;\r\n                            \r\n                            if(checkForFigure(i, j, board)){\r\n                                if(checkForRivalFigure(figureColor, i, j, board)){\r\n                                    !figureSteps.attack && coords.push({i, j})\r\n                                    isBreaked = true\r\n                                    break;\r\n                                }else if(checkForPlayerFigure(figureColor, i, j, board)) {\r\n                                    isBreaked = true\r\n                                    break\r\n                                };\r\n                                \r\n                            }else{\r\n                                \r\n                                coords.push({i, j})\r\n                            }\r\n                        }\r\n                    }\r\n                    if(activeCell && activeCell.data && activeCell.data.isFirstMove && !isBreaked && figureSteps.initial){\r\n                        for(let k=0; k<figureSteps.initial.length; k++){\r\n                            const i = activeCell.i + figureSteps.initial[k].i\r\n                            const j = activeCell.j + figureSteps.initial[k].j\r\n                            if(board[i] && board[i][j] && !checkForFigure(i, j, board)){\r\n                                coords.push({i, j})\r\n                            } else {break};\r\n                        }  \r\n                    }\r\n                    if(figureSteps.attack){\r\n                        for(let k=0; k<figureSteps.attack.length; k++){\r\n                            const i = activeCell.i + figureSteps.attack[k].i\r\n                            const j = activeCell.j + figureSteps.attack[k].j\r\n                            if(board[i] && board[i][j] && checkForFigure(i, j, board) && checkForRivalFigure(figureColor, i, j, board))\r\n                            coords.push({i, j})\r\n                        }  \r\n                    }\r\n                }\r\n\r\n                if(\r\n                    activeCell.i !== null && \r\n                    activeCell.j !== null && \r\n                    activeCell.data && \r\n                    activeCell.data.figureName === 'Pawn' && \r\n                    activeCell.data.figureColor && \r\n                    boardHistory && \r\n                    boardHistory[boardHistory.length - 2] \r\n                ){\r\n                    let lookingPawnCoords: {i: number, j: number}[] = [{i: activeCell.i, j: activeCell.j-1}, {i: activeCell.i, j: activeCell.j+1}]\r\n                    \r\n                    let deltaIForPrevBoard = activeCell.data.figureColor === 'white' ? -2 : 2\r\n                    let deltaIForPrevCoord = activeCell.data.figureColor === 'white' ? -1 : 1\r\n                    for(let k = 0; k < lookingPawnCoords.length; k++){\r\n                        const prevFigure = boardHistory[boardHistory.length - 2][lookingPawnCoords[k].i + deltaIForPrevBoard] && boardHistory[boardHistory.length - 2][lookingPawnCoords[k].i + deltaIForPrevBoard][lookingPawnCoords[k].j]\r\n                        if(\r\n                            board[lookingPawnCoords[k].i][lookingPawnCoords[k].j] &&\r\n                            board[lookingPawnCoords[k].i][lookingPawnCoords[k].j].figureName === 'Pawn' && \r\n                            board[lookingPawnCoords[k].i][lookingPawnCoords[k].j].figureColor !== activeCell.data.figureColor && \r\n                            prevFigure &&\r\n                            prevFigure.figureName === 'Pawn' &&\r\n                            prevFigure.figureColor === getRivalColor(activeCell.data.figureColor)\r\n                        ){\r\n                            coords.push({i: activeCell.i + deltaIForPrevCoord, j: lookingPawnCoords[k].j})\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if(activeCell.data && activeCell.data.figureName === 'King'){\r\n                    const coordsUnderCheck: {i:number, j: number}[] = []\r\n                    coords.forEach(kingPos=>{\r\n                    if(activeCell.data && activeCell.data.figureColor){\r\n                        let checkObj: any = getIsCheck(board, activeCell.data.figureColor, kingPos)\r\n                        let kingCoords = checkObj && checkObj.kingCoords \r\n                        if(kingCoords)\r\n                        coordsUnderCheck.push(kingCoords)\r\n                    }\r\n                    })\r\n                    const kingAvailableCoords: {i:number, j: number}[] = [];\r\n\r\n                    [...coordsUnderCheck, ...coords].forEach((o, i, arr) =>  {\r\n                        let index = arr.findIndex((e, ind) => {\r\n                          if (i < ind) {\r\n                            if(_.isEqual(e, o)){\r\n                            return _.isEqual(e, o)}\r\n                          }\r\n                        })\r\n                        if (index === -1) {\r\n                            kingAvailableCoords.push(o)\r\n                        } else{\r\n                            arr.splice(index, 1)\r\n                        }\r\n                      })\r\n\r\n                      if(activeCell.data.isFirstMove && activeCell.data.figureColor && typeof(activeCell.i) === 'number' && typeof(activeCell.j) === 'number'){\r\n                          let castleCoords = getCastleMoves(board, activeCell.data.figureColor, activeCell.i, activeCell.j)\r\n                          kingAvailableCoords.push(...castleCoords)\r\n                      }\r\n                    return kingAvailableCoords\r\n                }\r\n\r\n                if(isCheck && isCheck.isCheck){\r\n                    let { checkDirection } = isCheck;\r\n                    let blockingCoords: {i: number, j: number}[] = [];\r\n                    \r\n                    [...checkDirection, ...coords].forEach((o, i, arr) =>  {\r\n                        let eq = arr.find((e, ind) => {\r\n                          if (i > ind) {\r\n                            return _.isEqual(e, o);\r\n                          }\r\n                        })\r\n                        if (eq) {\r\n                            blockingCoords.push(o)\r\n                        } \r\n                      })\r\n\r\n                      return blockingCoords\r\n                }\r\n                if(activeCell.data.figureColor && activeCell.i && activeCell.j){\r\n                    const check: any = getIsCheck(board, activeCell.data.figureColor, {i: activeCell.i, j: activeCell.j})\r\n                    if(check){\r\n                        let boardItem = board[check.checkDirection[0].i][check.checkDirection[0].j]\r\n                        let deltaI = activeCell.i - check.checkDirection[0].i\r\n                        let deltaJ = activeCell.j - check.checkDirection[0].j\r\n                            let k = 1;\r\n                            while (boardItem && `${boardItem.figureColor}${boardItem.figureName}` !== `${activeCell.data.figureColor}King`) {\r\n                                boardItem = board[check.checkDirection[0].i + (deltaI * k)] && board[check.checkDirection[0].i+(deltaI * k)][check.checkDirection[0].j + (deltaJ * k)]\r\n                                k++;\r\n                                if(boardItem && boardItem.figureColor && `${boardItem.figureColor}${boardItem.figureName}` !== `${activeCell.data.figureColor}${activeCell.data.figureName}`){\r\n                                    break;\r\n                                }\r\n                            }\r\n                        if(boardItem && boardItem.figureName === 'King'){\r\n                            const availableCoords: {i:number, j: number}[] = [];\r\n    \r\n                            [...check.checkDirection, ...coords].forEach((o, i, arr) =>  {\r\n                                let eq = arr.find((e, ind) => {\r\n                                  if (i > ind) {\r\n                                    return _.isEqual(e, o);\r\n                                  }\r\n                                })\r\n                                if (eq) {\r\n                                    availableCoords.push(o)\r\n                                } \r\n                              })\r\n                            return availableCoords\r\n                        }\r\n                    }\r\n                }\r\n        return coords\r\n    }\r\n\r\n    const highlightCell = (i: number, j: number, color: string, board: Board | undefined): Board => {\r\n        if(!board) return []\r\n            const boardCopy = _.cloneDeep(board)\r\n            boardCopy[i][j].color = color\r\n            return boardCopy;\r\n    }\r\n\r\n    const getCastleMoves = (board: Board, kingColor: 'white' | 'black', kingI: number, kingJ: number): {i:number, j: number}[] => {\r\n        const steps = [\r\n            [{i: kingI, j: kingJ-1}, {i: kingI, j: kingJ-2}],\r\n            [{i: kingI, j: kingJ+1}, {i: kingI, j: kingJ+2}, {i: kingI, j: kingJ+3}],\r\n        ]\r\n        const reqs: boolean[][] = [[],[]]\r\n        for(let h = 0; h<steps.length; h++){\r\n            for(let k=0; k<steps[h].length; k++){\r\n                const {i, j} = steps[h][k];\r\n                const isFigure = checkForFigure(i, j, board)\r\n                const isCheck = getIsCheck(board, kingColor, {i, j}) \r\n                reqs[h].push(!isFigure && !isCheck)\r\n            }\r\n        }\r\n        let result: {i:number, j: number}[] = []\r\n        reqs.forEach((req, i)=>{\r\n            const rook = i === 0 ? board[kingI][kingJ-3] : board[kingI][kingJ+4]\r\n            if(req.every(item=>item) && rook.isFirstMove){\r\n                result.push(steps[i][1])\r\n            }\r\n        })\r\n        return result\r\n\r\n    }\r\n    \r\n\r\n    useEffect(()=>{\r\n        let newBoard = board;\r\n        if(prevActiveCell && typeof(prevActiveCell.i) === 'number' && typeof(prevActiveCell.j) === 'number'){\r\n            newBoard = highlightCell(prevActiveCell.i, prevActiveCell.j, getInitialSquareColor(prevActiveCell.i, prevActiveCell.j), newBoard)\r\n            if(prevActiveCell.data && prevActiveCell.data.figureName){\r\n                let steps = getFigureMoves(prevActiveCell, newBoard)\r\n                steps.forEach((item: any)=>{\r\n                    newBoard = highlightCell(item.i, item.j, getInitialSquareColor(item.i, item.j), newBoard)\r\n                })\r\n            }\r\n        }\r\n        \r\n        if(typeof(activeCell.i) === 'number' && typeof(activeCell.j) === 'number' && activeCell.data && activeCell.data.figureName){\r\n            newBoard = highlightCell(activeCell.i, activeCell.j, palette.green, newBoard)\r\n            let steps = getFigureMoves(activeCell, newBoard)\r\n            steps.forEach((item: any)=>{\r\n                newBoard = highlightCell(item.i, item.j, palette.green, newBoard)\r\n            })\r\n            \r\n        }\r\n        !_.isEqual(newBoard, board) && newBoard.length && setBoard(newBoard)\r\n            \r\n    }, [activeCell, prevActiveCell])\r\n\r\n    useEffect(()=>{\r\n        if(isCheck && isCheck.isCheck){\r\n            const boardH = highlightCell(isCheck.kingCoords.i, isCheck.kingCoords.j, palette.red, board)\r\n            setBoard(boardH)\r\n            isCheckMate(board, isCheck.checkDirection, currentPlayer)\r\n        }else{\r\n            const {i, j} = locateKing(board, getRivalColor(currentPlayer))\r\n            if(i>-1 && j >-1){\r\n                const boardH = highlightCell(i, j, getInitialSquareColor(i, j), board)\r\n                setBoard(boardH)\r\n            }\r\n        }\r\n    }, [isCheck])\r\n\r\n\r\n    return { handleBoxClick, checkmate, chooseFigure, handleChooseFigure } as const\r\n}","import{ useRef, useEffect} from 'react'\r\n\r\nexport function usePrevious<T>(value: T): T | undefined {\r\n    const ref = useRef<T>();\r\n    useEffect(() => {\r\n      ref.current = value;\r\n    }, [value]);\r\n    return ref.current;\r\n  }","import { useState, useEffect, useCallback, useRef } from 'react'\r\nimport { Board, BoardSquare, squareColor } from '../utils/interfaces'\r\nimport palette from '../utils/palette'\r\nimport { getInitialSquareColor } from './helpers'\r\n\r\nexport const useInitializeBoard = () => {\r\n    const [board, setBoard] = useState<Board>(new Array(8).fill(new Array(8).fill({})))\r\n    // const [isInit, setIsInit] = useState(false)\r\n    // const boardRef = useRef<Board>(new Array(8).fill(new Array(8).fill({})))\r\n    // const board = boardRef.current\r\n    // const setBoard = (value: Board) => {boardRef.current = value; setIsInit(!isInit)};\r\n    \r\n    const getInitialPositions = useCallback((chessBoard: Board): Board => {\r\n        const initBoard = chessBoard.map((row, i) => {\r\n            return row.map((cell, j) => {\r\n                return getInitialFigureByPosition(i, j)\r\n            })\r\n        });\r\n        return initBoard\r\n    }, [])\r\n\r\n    const getInitialFigureByPosition = useCallback((i: number, j: number): BoardSquare => {\r\n        let square: any = {}\r\n        let figureColor = i < 3 ? 'black' : 'white'\r\n        if(i === 1) square = {figureImg: 'Pawn_Black.png', figureName: 'Pawn', figureColor: 'black'}\r\n        if(i === 6) square = {figureImg: 'Pawn_White.png', figureName: 'Pawn', figureColor: 'white'}\r\n        if(i === 0 || i === 7){\r\n            if(j === 0 || j === 7) square = {figureImg: `Rook_${figureColor}.png`, figureName: 'Rook', figureColor}\r\n            if(j === 1 || j === 6) square = {figureImg: `Horse_${figureColor}.png`, figureName: 'Horse', figureColor}\r\n            if(j === 2 || j === 5) square = {figureImg: `Bishop_${figureColor}.png`, figureName: 'Bishop', figureColor}\r\n            if(j === 3) square = {figureImg: `King_${figureColor}.png`, figureName: 'King', figureColor}\r\n            if(j === 4) square = {figureImg: `Queen_${figureColor}.png`, figureName: 'Queen', figureColor}\r\n        }\r\n        square.color = getInitialSquareColor(i, j)\r\n        square.isFirstMove = true\r\n        return square\r\n    }, [])\r\n\r\n  \r\n\r\n    useEffect(()=>{\r\n        const initBoard = getInitialPositions(board)\r\n        setBoard(initBoard)\r\n    }, [])\r\n\r\n    return [board, setBoard] as const\r\n}","import{ useState, useEffect} from 'react'\r\nimport { Board } from '../utils/interfaces'\r\n\r\nexport const useBoardHistory = () => {\r\n    const [boardHistory, setBoardHistory] = useState<Board[]>([])\r\n\r\n    return [boardHistory, setBoardHistory] as const\r\n}","import { Paper, Button } from '@mui/material'\r\nimport { Box } from '@mui/system'\r\nimport React from 'react'\r\nimport styles from './chess.module.css'\r\nimport { useHandlers } from './useHandlers'\r\nimport { useInitializeBoard } from './useInitializeBoard'\r\nimport { Board, BoardSquare } from \"../utils/interfaces\"\r\nimport { useBoardHistory } from './useBoardHistory'\r\n\r\nexport default function Chess() {\r\n\r\n    const [board, setBoard] = useInitializeBoard()\r\n\r\n    const [boardHistory, setBoardHistory] = useBoardHistory()\r\n\r\n    const {handleBoxClick, checkmate, chooseFigure, handleChooseFigure} = useHandlers(board, setBoard, boardHistory, setBoardHistory)\r\n\r\n    const figures = (figureColor: 'white' | 'black') => ([\r\n        {figureImg: `Rook_${figureColor}.png`, figureName: 'Rook', figureColor},\r\n        {figureImg: `Horse_${figureColor}.png`, figureName: 'Horse', figureColor},\r\n        {figureImg: `Bishop_${figureColor}.png`, figureName: 'Bishop', figureColor},\r\n        {figureImg: `Queen_${figureColor}.png`, figureName: 'Queen', figureColor}\r\n    ])\r\n    const style = chooseFigure && chooseFigure.color === 'white' ? { top: 0 } : { bottom: 0 };\r\n  return (\r\n    <div className={styles.main}>\r\n            {checkmate && `${checkmate} wins`}\r\n        <Paper classes={{root: styles.board}} >\r\n            {Array.isArray(board) && board.map((row: any, i: number)=>{\r\n                return row.map((square: any, j: number)=>(\r\n                    <Button key={`${i}_${j}`} onClick={()=>(handleBoxClick(square, i, j, board))} classes={{root: styles.square}}>\r\n                        <div className={styles.square} style={{backgroundColor: square.color, backgroundImage: `url(\"/chessPieces/${square.figureImg}\")`}}> \r\n                        {chooseFigure && chooseFigure.i === i && chooseFigure.j === j && \r\n                            <Paper classes={{root: styles.figures}} sx={{...style, zIndex: 100}} >\r\n                                {figures(chooseFigure.color).map((square: any)=>{\r\n                                    \r\n                                    return <div key={`${i}_${j}_${square.figureName}`} onClick={(e)=>{e.preventDefault(); e.stopPropagation(); handleChooseFigure(square, i, j, board)}} className={styles.squareWithoutBorder}>\r\n                                        <div className={styles.square} style={{backgroundColor: square.color, backgroundImage: `url(\"/chessPieces/${square.figureImg}\")`, }}> \r\n                                        </div>\r\n                                    </div>\r\n                                })}\r\n                            </Paper>\r\n                        }\r\n                        </div>\r\n                    </Button>\r\n                ))\r\n            })}\r\n        </Paper>\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\nimport Chess from './chess/chess';\n\nfunction App() {\n  return (\n      <Chess />\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}